{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ghops Documentation","text":"<p>Welcome to the documentation for ghops - a powerful, modular CLI tool for managing GitHub repositories at scale.</p>"},{"location":"#what-is-ghops","title":"What is ghops?","text":"<p><code>ghops</code> (GitHub Operations) is a robust command-line tool that helps developers and organizations manage multiple GitHub repositories efficiently. Whether you're maintaining dozens of open source projects or managing repositories across a team, <code>ghops</code> provides automation, insights, and quality tooling to streamline your workflow.</p>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"#robust-architecture","title":"\ud83c\udfd7\ufe0f Robust Architecture","text":"<ul> <li>Modular Design: Clean separation of concerns with dedicated command modules</li> <li>Extensible: Easy to add new commands and functionality</li> <li>Well-Tested: 86% test coverage with 138 comprehensive unit and integration tests</li> <li>Error Resilient: Graceful handling of network failures and edge cases</li> </ul>"},{"location":"#repository-management","title":"\ud83d\ude80 Repository Management","text":"<ul> <li>Clone all your GitHub repositories with a single command</li> <li>Update multiple repositories simultaneously with smart conflict resolution</li> <li>Track status across all your projects with detailed reporting and progress bars</li> <li>Flexible repository discovery with configurable ignore patterns</li> </ul>"},{"location":"#pypi-integration","title":"\ud83d\udce6 PyPI Integration","text":"<ul> <li>Automatically detect Python packages from <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code></li> <li>Track PyPI publishing status and version information with real-time checking</li> <li>Identify outdated packages that need updates</li> <li>Performance optimized with optional checking for faster operations</li> </ul>"},{"location":"#social-media-automation","title":"\ud83d\udcf1 Social Media Automation","text":"<ul> <li>Template-driven content generation for Twitter, LinkedIn, and Mastodon</li> <li>Smart sampling of repositories with configurable filters</li> <li>Dry-run support to preview posts before publishing</li> <li>Rate limiting and posting frequency controls</li> </ul>"},{"location":"#github-pages-detection","title":"\ud83c\udf10 GitHub Pages Detection","text":"<ul> <li>Multi-method detection for Jekyll, MkDocs, Sphinx, and custom configurations</li> <li>Automatically build GitHub Pages URLs from repository metadata</li> <li>Track which repositories have active documentation sites</li> </ul>"},{"location":"#license-management","title":"\ud83d\udcc4 License Management","text":"<ul> <li>GitHub API integration for license template fetching</li> <li>Bulk license addition across multiple repositories</li> <li>Template customization with automatic placeholder replacement</li> <li>Support for all major open source licenses</li> </ul>"},{"location":"#configuration-management","title":"\u2699\ufe0f Configuration Management","text":"<ul> <li>Support for both JSON and TOML configuration formats</li> <li>Environment variable overrides for all settings</li> <li>Intelligent merging of defaults, file settings, and overrides</li> <li>Built-in configuration template generation</li> </ul>"},{"location":"#performance-quality","title":"\u26a1 Performance &amp; Quality","text":"<ul> <li>Fast operations with real-time progress indicators</li> <li>Configurable filtering and performance options</li> <li>Rich console output with detailed statistics</li> <li>Comprehensive error handling and logging</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Install ghops\npip install ghops\n\n# Generate configuration with examples\nghops config generate\n\n# Clone all your repositories\nghops get\n\n# Check status of all repositories\nghops status -r\n\n# Sample repositories for social media (dry run)\nghops social sample --size 3\nghops social post --dry-run\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#open-source-maintainers","title":"Open Source Maintainers","text":"<ul> <li>Track all your projects in one place</li> <li>Automate social media promotion of releases</li> <li>Monitor PyPI package status across projects</li> <li>Keep licenses up to date</li> </ul>"},{"location":"#development-teams","title":"Development Teams","text":"<ul> <li>Synchronize repository updates across team members</li> <li>Track project health and activity</li> <li>Maintain consistent licensing and documentation</li> </ul>"},{"location":"#individual-developers","title":"Individual Developers","text":"<ul> <li>Organize and monitor personal projects</li> <li>Automate promotion of your work</li> <li>Track your open source contributions</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation - Install and configure ghops</li> <li>Basic Usage - Learn the core commands</li> <li>Configuration - Set up your preferences</li> <li>Advanced Features - Explore PyPI and social media features</li> </ol>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Usage Guide - Comprehensive command reference and examples</li> <li>Future Plans - Roadmap and upcoming features</li> <li>Contributing - How to contribute to the project</li> </ul>"},{"location":"#recent-updates","title":"Recent Updates","text":""},{"location":"#version-060","title":"Version 0.6.0 \ud83c\udf89","text":"<p>Major Architecture &amp; Quality Overhaul - This release represents a complete transformation of <code>ghops</code> into a robust, enterprise-ready tool.</p>"},{"location":"#complete-architecture-redesign","title":"\ud83c\udfd7\ufe0f Complete Architecture Redesign","text":"<ul> <li>\u2705 Modular Command Structure: Separated all commands into dedicated modules (<code>ghops/commands/</code>)</li> <li>\u2705 Clean Separation of Concerns: Utilities, configuration, and API integrations properly separated</li> <li>\u2705 Extensible Design: Easy to add new commands and features without breaking existing functionality</li> <li>\u2705 Import Optimization: Eliminated circular dependencies and improved startup time</li> </ul>"},{"location":"#comprehensive-testing-framework","title":"\ud83e\uddea Comprehensive Testing Framework","text":"<ul> <li>\u2705 138 Tests: Complete test coverage for all functionality</li> <li>\u2705 86% Code Coverage: Robust testing of edge cases and error conditions</li> <li>\u2705 Unit &amp; Integration Tests: Both isolated component testing and end-to-end workflows</li> <li>\u2705 Mock Testing: Reliable testing of external API interactions</li> <li>\u2705 Error Condition Testing: Comprehensive failure scenario coverage</li> </ul>"},{"location":"#performance-reliability-enhancements","title":"\u26a1 Performance &amp; Reliability Enhancements","text":"<ul> <li>\u2705 Optional API Checks: <code>--no-pypi-check</code> and <code>--no-pages-check</code> for faster operations</li> <li>\u2705 Robust Error Handling: Graceful handling of network failures and edge cases</li> <li>\u2705 Progress Indicators: Real-time progress bars for long-running operations</li> <li>\u2705 Concurrent Operations: Configurable parallel processing for better performance</li> </ul>"},{"location":"#advanced-social-media-framework","title":"\ud83d\udcf1 Advanced Social Media Framework","text":"<ul> <li>\u2705 Template-Driven Content: Customizable post templates for different content types</li> <li>\u2705 Multi-Platform Support: Twitter, LinkedIn, and Mastodon integration</li> <li>\u2705 Smart Sampling: Configurable repository filtering and random selection</li> <li>\u2705 Dry-Run Support: Preview posts before publishing</li> <li>\u2705 Rate Limiting: Built-in posting frequency controls and daily limits</li> </ul>"},{"location":"#enhanced-configuration-system","title":"\u2699\ufe0f Enhanced Configuration System","text":"<ul> <li>\u2705 Multiple Formats: Support for both JSON and TOML configuration files</li> <li>\u2705 Environment Overrides: All settings controllable via environment variables</li> <li>\u2705 Intelligent Merging: Proper precedence of defaults, files, and overrides</li> <li>\u2705 Example Generation: <code>ghops config generate</code> creates comprehensive examples</li> </ul>"},{"location":"#robust-license-management","title":"\ud83d\udcc4 Robust License Management","text":"<ul> <li>\u2705 GitHub API Integration: Direct fetching of license templates from GitHub</li> <li>\u2705 Template Customization: Automatic placeholder replacement for author details</li> <li>\u2705 Bulk Operations: Add licenses to multiple repositories efficiently</li> <li>\u2705 All Major Licenses: Support for MIT, Apache, GPL, and many others</li> </ul>"},{"location":"#enhanced-github-pages-detection","title":"\ud83c\udf10 Enhanced GitHub Pages Detection","text":"<ul> <li>\u2705 Multi-Method Detection: Scans for Jekyll, MkDocs, Sphinx, and custom configurations</li> <li>\u2705 URL Construction: Automatically builds Pages URLs from repository metadata</li> <li>\u2705 Documentation Tracking: Monitor which projects have active documentation</li> </ul>"},{"location":"#improved-pypi-integration","title":"\ud83d\udce6 Improved PyPI Integration","text":"<ul> <li>\u2705 Smart Package Detection: Enhanced scanning of <code>pyproject.toml</code>, <code>setup.py</code>, <code>setup.cfg</code></li> <li>\u2705 Version Comparison: Track local vs published version differences</li> <li>\u2705 Performance Options: Optional PyPI checking for faster status operations</li> <li>\u2705 Error Resilience: Graceful handling of PyPI API issues</li> </ul>"},{"location":"#version-05x-legacy","title":"Version 0.5.x (Legacy)","text":"<ul> <li>\u2705 PyPI Integration: Automatic detection and tracking of Python packages</li> <li>\u2705 Social Media Framework: Generate and post content about your projects</li> <li>\u2705 Configuration System: Flexible configuration with example generation</li> <li>\u2705 Performance Improvements: Progress bars and faster operations</li> <li>\u2705 Enhanced Status: Rich status reporting with PyPI and GitHub Pages info</li> </ul>"},{"location":"#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub Repository: github.com/queelius/ghops</li> <li>Issues and Bug Reports: GitHub Issues</li> <li>Feature Requests: GitHub Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p> <p>Ready to streamline your GitHub workflow? Get started with the installation guide!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#060-2025-06-27","title":"[0.6.0] - 2025-06-27","text":""},{"location":"changelog/#major-architecture-overhaul","title":"\ud83c\udf89 Major Architecture Overhaul","text":""},{"location":"changelog/#added","title":"\u2728 Added","text":"<ul> <li>Modular Command Structure: Complete refactoring into dedicated command modules (<code>commands/get.py</code>, <code>commands/update.py</code>, <code>commands/status.py</code>, <code>commands/license.py</code>)</li> <li>Comprehensive Testing Suite: 138 unit and integration tests achieving 86% code coverage</li> <li>Enhanced License Management: Full GitHub API integration for license templates with customization support</li> <li>Advanced Configuration System: Support for JSON/TOML formats with environment variable overrides</li> <li>Social Media Automation Framework: Template-driven content generation for Twitter, LinkedIn, and Mastodon</li> <li>Robust Error Handling: Graceful handling of network failures, API timeouts, and edge cases</li> <li>Performance Optimizations: Optional PyPI/Pages checks with <code>--no-pypi-check</code> and <code>--no-pages-check</code> flags</li> <li>Progress Reporting: Real-time progress bars and comprehensive operation summaries</li> </ul>"},{"location":"changelog/#improved","title":"\ud83d\udd27 Improved","text":"<ul> <li>PyPI Detection: Enhanced package detection from <code>pyproject.toml</code>, <code>setup.py</code>, and <code>setup.cfg</code> with fallback strategies</li> <li>GitHub Pages Detection: Multi-method detection supporting Jekyll, MkDocs, Sphinx, and custom configurations</li> <li>Repository Updates: Smart conflict resolution strategies and improved merge handling</li> <li>CLI Interface: Consistent argument handling and better help documentation</li> <li>Configuration Management: Intelligent config merging with defaults, file settings, and environment overrides</li> </ul>"},{"location":"changelog/#fixed","title":"\ud83d\udc1b Fixed","text":"<ul> <li>Import Errors: Resolved circular dependencies and module loading issues</li> <li>Global State Issues: Eliminated shared state problems in concurrent operations  </li> <li>API Error Handling: Better handling of GitHub API rate limits and network failures</li> <li>Version Comparison: Fixed package version parsing and comparison logic</li> <li>Path Handling: Improved cross-platform path resolution and repository discovery</li> </ul>"},{"location":"changelog/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Updated README: Comprehensive feature overview with usage examples and configuration details</li> <li>API Documentation: Detailed command reference and configuration options</li> <li>Contributing Guide: Updated development workflow and testing procedures</li> <li>Example Configurations: Complete TOML/JSON configuration templates</li> </ul>"},{"location":"changelog/#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":"<ul> <li>Unit Tests: Comprehensive coverage of individual functions and methods</li> <li>Integration Tests: End-to-end CLI testing with mocked external dependencies</li> <li>Error Scenario Testing: Edge cases, network failures, and malformed data handling</li> <li>Performance Testing: Validation of concurrent operations and large repository sets</li> <li>CI/CD Pipeline: Automated testing and coverage reporting</li> </ul>"},{"location":"changelog/#migration-guide","title":"\ud83d\udd04 Migration Guide","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Configuration file structure has been updated for better organization</li> <li>Some command line arguments have been renamed for consistency</li> <li>Social media configuration now requires explicit platform configuration</li> </ul>"},{"location":"changelog/#migration-steps","title":"Migration Steps","text":"<ol> <li>Run <code>ghops config generate</code> to create an updated configuration file</li> <li>Update any existing <code>.ghopsrc</code> files to match the new structure</li> <li>Update scripts to use new command line argument names</li> </ol>"},{"location":"changelog/#05x-previous-versions","title":"[0.5.x] - Previous Versions","text":""},{"location":"changelog/#legacy-features","title":"Legacy Features","text":"<ul> <li>Basic repository cloning and updating</li> <li>Simple PyPI package detection</li> <li>Basic GitHub Pages detection</li> <li>Monolithic architecture</li> </ul> <p>For detailed information about any release, see the GitHub Releases page.</p>"},{"location":"future-plans/","title":"Future Plans for ghops","text":"<p>This document outlines planned features and enhancements for <code>ghops</code>, organized by priority and complexity.</p>"},{"location":"future-plans/#v060-major-milestone-completed","title":"\ud83c\udf89 v0.6.0 - Major Milestone Completed \u2705","text":""},{"location":"future-plans/#architecture-quality-overhaul","title":"Architecture &amp; Quality Overhaul","text":"<ul> <li>\u2705 Complete Modular Redesign: Separated all functionality into dedicated command modules</li> <li>\u2705 Comprehensive Testing: 138 tests achieving 86% code coverage</li> <li>\u2705 Robust Error Handling: Graceful handling of network failures and edge cases</li> <li>\u2705 Performance Optimizations: Optional API checks with performance flags</li> <li>\u2705 Enhanced Documentation: Complete rewrite of README, usage guide, and API docs</li> </ul>"},{"location":"future-plans/#enhanced-feature-set","title":"Enhanced Feature Set","text":"<ul> <li>\u2705 Advanced Configuration: JSON/TOML support with environment variable overrides</li> <li>\u2705 License Management: Full GitHub API integration with template customization</li> <li>\u2705 Social Media Automation: Multi-platform support with template-driven content</li> <li>\u2705 GitHub Pages Detection: Multi-method detection for documentation sites</li> <li>\u2705 Improved PyPI Integration: Enhanced package detection and version tracking</li> </ul>"},{"location":"future-plans/#previously-implemented","title":"Previously Implemented \u2705","text":""},{"location":"future-plans/#pypi-package-detection-and-management","title":"PyPI Package Detection and Management","text":"<ul> <li>\u2705 Package Detection: Scan repositories for <code>pyproject.toml</code>, <code>setup.py</code>, <code>setup.cfg</code></li> <li>\u2705 PyPI Status Check: Query PyPI API to verify packages and get version info</li> <li>\u2705 Status Integration: Include PyPI package and version columns in status output</li> <li>\u2705 Statistics Tracking: Track repos with packages, published packages, outdated packages</li> <li>\u2705 Performance Options: <code>--no-pypi-check</code> flag for faster results</li> </ul>"},{"location":"future-plans/#configuration-system","title":"Configuration System","text":"<ul> <li>\u2705 Config File Support: <code>~/.ghopsrc</code> with JSON/TOML format support</li> <li>\u2705 Example Generation: <code>ghops config generate</code> command</li> <li>\u2705 Environment Override: <code>GHOPS_CONFIG</code> and per-setting environment variables</li> </ul>"},{"location":"future-plans/#social-media-framework","title":"Social Media Framework","text":"<ul> <li>\u2705 Platform Support: Framework for Twitter/X, LinkedIn, Mastodon</li> <li>\u2705 Smart Sampling: Random repository selection for content with filtering</li> <li>\u2705 Template System: Configurable post templates for different content types</li> <li>\u2705 Preview Mode: <code>--dry-run</code> flag to preview posts before publishing</li> <li>\u2705 Rate Limiting: Daily limits and time-based posting controls</li> </ul>"},{"location":"future-plans/#next-release-goals-v070","title":"\ud83d\ude80 Next Release Goals (v0.7.0)","text":""},{"location":"future-plans/#priority-1-core-usability-improvements","title":"Priority 1: Core Usability Improvements \ud83c\udfaf","text":""},{"location":"future-plans/#single-repository-operations","title":"Single Repository Operations","text":"<p>Motivation: Fix the critical usability gap where <code>ghops</code> does nothing when run inside a git repository.</p> <p>Current Problem:</p> <pre><code>cd ~/my-awesome-project  # This is a git repo\nghops status             # Does nothing - very confusing!\nghops update            # Does nothing - breaks user expectations\n</code></pre> <p>Expected Behavior:</p> <pre><code>cd ~/my-awesome-project  # This is a git repo  \nghops status             # Shows detailed status of THIS repo\nghops update            # Updates THIS repo with enhanced output\nghops license add mit   # Adds license to THIS repo\n</code></pre> <p>Implementation Features:</p> <ul> <li>Smart Mode Detection: Auto-detect if current directory is a git repository</li> <li>Single vs Batch Modes:</li> <li>Single repo mode: Detailed output, repo-specific operations</li> <li>Batch mode: Summary tables, multi-repo operations</li> <li>Unified Command Interface:</li> <li><code>ghops status</code> - Auto-detects mode based on current directory</li> <li><code>ghops status --batch</code> - Force batch mode even in git directory</li> <li><code>ghops status --single</code> - Force single mode even outside git directory</li> <li>Enhanced Single-Repo Output: More detailed information when focusing on one repository</li> </ul>"},{"location":"future-plans/#programmatic-api","title":"Programmatic API","text":"<p>Motivation: Enable <code>ghops</code> integration into Python scripts, automation systems, and provide better developer experience.</p> <p>API Design Goals:</p> <ul> <li>Clean Python Interface: Full programmatic access to all <code>ghops</code> functionality</li> <li>Type Safety: Complete type hints for IDE support and better developer experience</li> <li>Async Support: For operations involving network calls and batch processing</li> <li>Documentation: Auto-generated API docs via docstrings and MkDocs</li> </ul> <p>Example API Usage:</p> <pre><code>from ghops import api\nfrom pathlib import Path\n\n# Single repository operations\nrepo = api.repository(Path.cwd())\nstatus = repo.get_status()\npypi_info = repo.get_pypi_info()\npages_url = repo.get_pages_url()\n\n# Batch operations\nresults = api.scan_repositories(\n    directory=\"~/projects\",\n    recursive=True,\n    filters={\"language\": \"python\", \"has_pyproject\": True}\n)\n\n# Social media operations\nposts = api.create_social_posts(\n    repositories=results.with_packages(),\n    template=\"pypi_release\",\n    dry_run=True\n)\n</code></pre> <p>Implementation Strategy:</p> <ul> <li>CLI as Thin Wrapper: Refactor CLI to use the programmatic API internally</li> <li>Result Objects: Structured returns instead of console output</li> <li>Error Handling: Proper exception hierarchy for programmatic error handling</li> <li>Testing: API makes comprehensive testing much easier</li> </ul>"},{"location":"future-plans/#priority-2-enhanced-functionality","title":"Priority 2: Enhanced Functionality \u26a1","text":""},{"location":"future-plans/#auto-package-generation","title":"Auto-Package Generation","text":"<p>Motivation: Make it easy to convert existing repositories into publishable Python packages.</p> <ul> <li>New command: <code>ghops package init</code> to bootstrap packaging for repositories</li> <li>Smart defaults:</li> <li>Package name from repository directory name</li> <li>Version starts at <code>0.1.0</code></li> <li>Author/email from <code>git config</code></li> <li>Dependencies from <code>requirements.txt</code> if available</li> <li>Template generation: Create minimal but complete <code>pyproject.toml</code></li> <li>Interactive mode: Prompt for key metadata when auto-detection isn't sufficient</li> </ul>"},{"location":"future-plans/#publishing-automation","title":"Publishing Automation","text":"<ul> <li>New command: <code>ghops package publish</code> for automated PyPI uploads</li> <li>Version management: Integration with version bumping</li> <li>Build automation: Automatic wheel and sdist generation</li> <li>Safety checks: Verify package before upload</li> <li>Batch publishing: Publish multiple packages with version updates</li> </ul>"},{"location":"future-plans/#repository-filtering-and-selection","title":"Repository Filtering and Selection","text":""},{"location":"future-plans/#smart-filtering-system","title":"Smart Filtering System","text":"<p>Motivation: When managing hundreds of repositories, you need fine-grained control over which repositories to operate on.</p> <ul> <li><code>.ghopsignore</code> files: Similar to <code>.gitignore</code>, but for excluding repositories from operations</li> <li>Base directory: Place <code>.ghopsignore</code> in the root directory to set global exclusions</li> <li>Subdirectory filtering: <code>.ghopsignore</code> in subdirectories excludes repos in that subtree</li> <li>Self-exclusion: If a repository directory contains <code>.ghopsignore</code>, it excludes itself</li> <li>Pattern matching: Support glob patterns, regex, and path-based exclusions</li> <li>Command-line filters: One-off filtering for specific operations</li> <li><code>--include</code> and <code>--exclude</code> flags with glob patterns</li> <li><code>--filter</code> for complex expressions (e.g., <code>--filter \"language:python AND has:pyproject.toml\"</code>)</li> <li><code>--limit N</code> to operate on only N repositories (useful for testing)</li> <li>Whitelist mode: Invert the filtering logic</li> <li><code>--whitelist-only</code> mode where only explicitly included repositories are processed</li> <li>Useful for focusing on specific projects while ignoring everything else</li> <li>Can be combined with <code>.ghopsinclude</code> files for persistent whitelist configuration</li> <li>Smart selection:</li> <li><code>--changed-only</code>: Only repositories with uncommitted changes</li> <li><code>--outdated-only</code>: Only repositories behind their remote</li> <li><code>--python-only</code>: Only repositories with Python code</li> <li><code>--has-issues</code>: Only repositories with open GitHub issues</li> </ul>"},{"location":"future-plans/#filter-configuration","title":"Filter Configuration","text":"<ul> <li>Filter profiles: Named filter configurations for different use cases</li> <li><code>ghops config filter create work --include \"work/*\" --exclude \"*/archive/*\"</code></li> <li><code>ghops config filter create python --filter \"language:python\"</code></li> <li><code>ghops status --filter-profile python</code></li> <li>Interactive selection: TUI for selecting repositories visually</li> <li>Filter testing: <code>ghops filter test</code> to see which repositories match current filters</li> </ul>"},{"location":"future-plans/#medium-term-goals-v070-v080","title":"Medium-term Goals (v0.7.0 - v0.8.0)","text":""},{"location":"future-plans/#enhanced-repository-intelligence","title":"Enhanced Repository Intelligence","text":""},{"location":"future-plans/#language-and-framework-detection","title":"Language and Framework Detection","text":"<ul> <li>Programming language detection: Beyond just Python, detect Go, Rust, JavaScript, etc.</li> <li>Framework identification: Detect React, Django, FastAPI, etc.</li> <li>Dependency analysis: Parse <code>requirements.txt</code>, <code>package.json</code>, <code>Cargo.toml</code>, etc.</li> <li>Technology stack visualization: Show the full tech stack for each repository</li> </ul>"},{"location":"future-plans/#repository-health-metrics","title":"Repository Health Metrics","text":"<ul> <li>Code quality indicators: Last commit date, test presence, documentation coverage</li> <li>Community metrics: Star count, fork count, issue count, contributor count</li> <li>Maintenance status: Detect abandoned or actively maintained projects</li> <li>Security analysis: Check for known vulnerabilities in dependencies</li> </ul>"},{"location":"future-plans/#enhanced-github-integration","title":"Enhanced GitHub Integration","text":""},{"location":"future-plans/#issues-and-pull-requests","title":"Issues and Pull Requests","text":"<ul> <li>Issue management: List open issues across all repositories</li> <li>PR status: Track open pull requests and their status</li> <li>Review assignments: See which PRs need your attention</li> <li>Milestone tracking: Monitor progress toward repository milestones</li> </ul>"},{"location":"future-plans/#github-actions-integration","title":"GitHub Actions Integration","text":"<ul> <li>Workflow status: See the status of CI/CD pipelines across repositories</li> <li>Failed builds: Quickly identify repositories with failing tests</li> <li>Deployment status: Track which repositories have pending deployments</li> <li>Action summaries: Aggregate build success rates and performance metrics</li> </ul>"},{"location":"future-plans/#advanced-social-media-features","title":"Advanced Social Media Features","text":""},{"location":"future-plans/#real-social-media-api-integration","title":"Real Social Media API Integration","text":"<ul> <li>Twitter/X API: Full implementation with tweet posting</li> <li>LinkedIn API: Professional network posting for project updates</li> <li>Mastodon API: Decentralized social media support</li> <li>Instagram API: Visual content for project screenshots</li> <li>Reddit API: Automated posting to relevant programming subreddits</li> </ul>"},{"location":"future-plans/#content-intelligence","title":"Content Intelligence","text":"<ul> <li>Engagement tracking: Monitor which posts perform best</li> <li>Optimal timing: Learn the best times to post for your audience</li> <li>Hashtag optimization: Suggest trending and relevant hashtags</li> <li>Content personalization: Adapt content style based on platform</li> <li>Analytics dashboard: Track social media impact on repository metrics</li> </ul>"},{"location":"future-plans/#automated-campaigns","title":"Automated Campaigns","text":"<ul> <li>Release announcements: Auto-post when new versions are published</li> <li>Documentation updates: Announce new documentation or tutorials</li> <li>Achievement celebrations: Post about star milestones, contributor achievements</li> <li>Event-driven posting: React to GitHub events (new stars, forks, etc.)</li> </ul>"},{"location":"future-plans/#long-term-goals-v090-v100","title":"Long-term Goals (v0.9.0 - v1.0.0)","text":""},{"location":"future-plans/#analytics-and-seo-enhancement","title":"Analytics and SEO Enhancement","text":""},{"location":"future-plans/#google-analytics-integration","title":"Google Analytics Integration","text":"<p>Motivation: Improve discoverability and track the impact of your open source projects.</p> <ul> <li>Analytics setup automation:</li> <li>GitHub Pages: Auto-configure Google Analytics for GitHub Pages sites</li> <li>Documentation sites: Add analytics to MkDocs, Sphinx, GitBook, etc.</li> <li>README badges: Generate analytics-enabled badges for repository READMEs</li> <li>Custom domains: Handle analytics for repositories with custom domain GitHub Pages</li> <li>SEO optimization:</li> <li>Meta tag generation: Auto-generate SEO-friendly meta tags for GitHub Pages</li> <li>Sitemap generation: Create and update sitemaps for better search indexing</li> <li>Schema markup: Add structured data for better search result presentation</li> <li>Open Graph tags: Optimize social media sharing with proper OG tags</li> <li>Content optimization:</li> <li>README analysis: Suggest improvements for better search visibility</li> <li>Keyword optimization: Analyze and suggest keywords based on repository content</li> <li>Description optimization: Improve repository descriptions for search engines</li> <li>Topic suggestions: Recommend GitHub topics to improve discoverability</li> <li>Performance tracking:</li> <li>Traffic analysis: Aggregate analytics across all your repositories</li> <li>Conversion tracking: Track downloads, clones, stars from different sources</li> <li>Search ranking: Monitor how your repositories rank for relevant keywords</li> <li>Referrer analysis: Understand where your traffic is coming from</li> </ul>"},{"location":"future-plans/#analytics-reporting","title":"Analytics Reporting","text":"<ul> <li>Dashboard generation: Create unified analytics dashboards across all repositories</li> <li>Trend analysis: Track growth patterns and identify successful strategies</li> <li>Goal tracking: Set and monitor specific objectives (downloads, stars, contributors)</li> <li>Competitive analysis: Compare your repositories against similar projects</li> </ul>"},{"location":"future-plans/#advanced-github-operations","title":"Advanced GitHub Operations","text":""},{"location":"future-plans/#repository-management","title":"Repository Management","text":"<ul> <li>Repository creation: Create new repositories with templates and best practices</li> <li>Branch management: Bulk operations on branches across repositories</li> <li>Webhook management: Set up and manage webhooks for automation</li> <li>Settings synchronization: Keep repository settings consistent across projects</li> </ul>"},{"location":"future-plans/#team-collaboration","title":"Team Collaboration","text":"<ul> <li>Team management: Manage collaborators and permissions across repositories</li> <li>Organization tools: Tools for managing repositories at the organization level</li> <li>Access auditing: Review and audit access permissions</li> <li>Compliance reporting: Generate reports for security and compliance requirements</li> </ul>"},{"location":"future-plans/#enterprise-features","title":"Enterprise Features","text":""},{"location":"future-plans/#performance-and-scalability","title":"Performance and Scalability","text":"<ul> <li>Parallel processing: Optimize for handling hundreds of repositories</li> <li>Caching strategies: Cache GitHub API responses for better performance</li> <li>Incremental updates: Only process changed repositories</li> <li>Background processing: Queue long-running operations</li> </ul>"},{"location":"future-plans/#integration-and-extensibility","title":"Integration and Extensibility","text":"<ul> <li>Plugin system: Allow third-party extensions and customizations</li> <li>API endpoints: Provide REST API for integration with other tools</li> <li>Webhook support: React to external events and trigger ghops operations</li> <li>IDE integration: Plugins for VS Code, PyCharm, etc.</li> </ul>"},{"location":"future-plans/#enterprise-management","title":"Enterprise Management","text":"<ul> <li>Multi-user support: Support for teams and organizations</li> <li>Role-based access: Different permission levels for different users</li> <li>Audit logging: Comprehensive logging for enterprise compliance</li> <li>Backup and restore: Backup configurations and restore operations</li> </ul>"},{"location":"future-plans/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"future-plans/#phase-1-core-usability-v070","title":"Phase 1: Core Usability (v0.7.0)","text":"<ul> <li>Single repository operation mode with smart detection</li> <li>Programmatic API with full type hints and async support</li> <li>Enhanced single-repo output and error handling</li> <li>CLI refactoring to use the API internally</li> </ul>"},{"location":"future-plans/#phase-2-package-management-filtering-v080","title":"Phase 2: Package Management &amp; Filtering (v0.8.0)","text":"<ul> <li>Auto-package generation (<code>ghops package init</code>)</li> <li>Publishing automation (<code>ghops package publish</code>)</li> <li><code>.ghopsignore</code> file support</li> <li>Command-line filtering options</li> <li>Filter profiles and testing</li> </ul>"},{"location":"future-plans/#phase-3-repository-intelligence-v090","title":"Phase 3: Repository Intelligence (v0.9.0)","text":"<ul> <li>Language and framework detection</li> <li>Repository health metrics</li> <li>Enhanced GitHub integration (issues, PRs, actions)</li> </ul>"},{"location":"future-plans/#phase-4-advanced-social-media-v100","title":"Phase 4: Advanced Social Media (v1.0.0)","text":"<ul> <li>Real API integrations for all platforms</li> <li>Content intelligence and optimization</li> <li>Automated campaign management</li> </ul>"},{"location":"future-plans/#phase-5-analytics-and-seo-v110","title":"Phase 5: Analytics and SEO (v1.1.0)","text":"<ul> <li>Google Analytics automation</li> <li>SEO optimization tools</li> <li>Traffic analysis and reporting</li> </ul>"},{"location":"future-plans/#phase-6-enterprise-features-v120","title":"Phase 6: Enterprise Features (v1.2.0)","text":"<ul> <li>Performance optimizations</li> <li>Advanced GitHub operations</li> <li>Team collaboration features</li> <li>Plugin system and extensibility</li> </ul>"},{"location":"future-plans/#contributing-to-these-goals","title":"Contributing to These Goals","text":"<p>We welcome contributions in all these areas! If you're interested in working on any of these features:</p> <ol> <li>Check existing issues: Many of these are tracked as GitHub issues</li> <li>Start a discussion: Open an issue to discuss your approach</li> <li>Small PRs: Start with small, focused pull requests</li> <li>Documentation: Help improve docs and examples</li> <li>Testing: Add tests for new features and edge cases</li> </ol> <p>The future of <code>ghops</code> is exciting, and we're building it together with the community!</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide covers all the features and commands available in <code>ghops</code>.</p>"},{"location":"usage/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"usage/#install-ghops","title":"Install ghops","text":"<pre><code>pip install ghops\n</code></pre>"},{"location":"usage/#initial-configuration","title":"Initial Configuration","text":"<pre><code># Generate an example configuration file\nghops config generate\n\n# Edit the configuration (opens ~/.ghopsrc)\nnano ~/.ghopsrc\n\n# View current configuration\nghops config show\n</code></pre>"},{"location":"usage/#core-commands","title":"Core Commands","text":""},{"location":"usage/#repository-operations","title":"Repository Operations","text":""},{"location":"usage/#clone-repositories","title":"Clone Repositories","text":"<pre><code># Clone all your GitHub repositories\nghops get\n\n# Clone to a specific directory\nghops get --dir ~/projects\n\n# Clone and add MIT license\nghops get --license mit --license-name \"Your Name\" --license-email \"you@example.com\"\n</code></pre>"},{"location":"usage/#update-repositories","title":"Update Repositories","text":"<pre><code># Update all repositories in current directory\nghops update\n\n# Update recursively (search subdirectories)\nghops update -r\n\n# Update repositories in specific directory\nghops update --dir ~/projects -r\n\n# Update and add/update licenses\nghops update -r --license mit --license-name \"Your Name\"\n</code></pre>"},{"location":"usage/#check-status","title":"Check Status","text":"<pre><code># Show comprehensive status\nghops status -r\n\n# Fast status (skip PyPI and Pages checks)\nghops status --no-pypi-check --no-pages-check\n\n# JSON output for scripts\nghops status --json\n\n# Status for specific directory\nghops status --dir ~/projects -r\n</code></pre>"},{"location":"usage/#configuration-management","title":"Configuration Management","text":""},{"location":"usage/#generate-configuration","title":"Generate Configuration","text":"<pre><code># Create example config file\nghops config generate\n</code></pre> <p>This creates <code>~/.ghopsrc</code> with documented examples for all configuration options.</p>"},{"location":"usage/#view-configuration","title":"View Configuration","text":"<pre><code># Show current configuration\nghops config show\n</code></pre>"},{"location":"usage/#pypi-integration","title":"PyPI Integration","text":"<p>The PyPI integration is automatically enabled and provides:</p> <ul> <li>Package Detection: Scans for <code>pyproject.toml</code>, <code>setup.py</code>, <code>setup.cfg</code></li> <li>PyPI Status: Checks if packages exist on PyPI</li> <li>Version Tracking: Shows current PyPI version vs local version</li> <li>Statistics: Counts published packages, outdated packages</li> </ul>"},{"location":"usage/#pypi-status-information","title":"PyPI Status Information","text":"<p>The <code>status</code> command shows: - PyPI Package: Package name (linked if published) - Version: Current version on PyPI or \"Not published\" - Statistics: Summary of package status across all repositories</p>"},{"location":"usage/#configuration-options","title":"Configuration Options","text":"<pre><code>[pypi]\ncheck_by_default = true         # Include PyPI info in status\ntimeout_seconds = 10            # API request timeout\ninclude_test_pypi = false       # Also check test.pypi.org\n</code></pre>"},{"location":"usage/#social-media-automation","title":"Social Media Automation","text":""},{"location":"usage/#sample-repositories","title":"Sample Repositories","text":"<pre><code># Sample 3 repositories randomly\nghops social sample\n\n# Sample 5 repositories\nghops social sample --size 5\n\n# Sample from specific directory\nghops social sample --dir ~/projects --size 3\n</code></pre>"},{"location":"usage/#create-and-post-content","title":"Create and Post Content","text":"<pre><code># Preview what would be posted\nghops social post --dry-run\n\n# Preview with custom sample size\nghops social post --dry-run --size 2\n\n# Actually post to configured platforms\nghops social post --size 3\n</code></pre>"},{"location":"usage/#platform-configuration","title":"Platform Configuration","text":"<p>Configure social media platforms in your <code>~/.ghopsrc</code>:</p> <pre><code>[social_media.platforms.twitter]\nenabled = true\napi_key = \"your_twitter_api_key\"\napi_secret = \"your_twitter_api_secret\"\naccess_token = \"your_access_token\"\naccess_token_secret = \"your_access_token_secret\"\n\n[social_media.platforms.linkedin]\nenabled = true\naccess_token = \"your_linkedin_access_token\"\n\n[social_media.platforms.mastodon]\nenabled = true\ninstance_url = \"https://mastodon.social\"\naccess_token = \"your_mastodon_access_token\"\n</code></pre>"},{"location":"usage/#post-templates","title":"Post Templates","text":"<p>Customize post templates for different content types:</p> <pre><code>[social_media.platforms.twitter.templates]\npypi_release = \"\ud83d\ude80 New release: {package_name} v{version} is now available on PyPI! {pypi_url} #{package_name} #python #opensource\"\ngithub_pages = \"\ud83d\udcd6 Updated documentation for {repo_name}: {pages_url} #docs #opensource\"\nrandom_highlight = \"\u2728 Working on {repo_name}: {description} {repo_url} #{language} #coding\"\n</code></pre> <p>Available template variables: - <code>{repo_name}</code> - Repository name - <code>{repo_url}</code> - GitHub repository URL - <code>{description}</code> - Repository description - <code>{language}</code> - Primary language - <code>{license}</code> - License type - <code>{package_name}</code> - PyPI package name - <code>{version}</code> - PyPI package version - <code>{pypi_url}</code> - PyPI package URL - <code>{pages_url}</code> - GitHub Pages URL</p>"},{"location":"usage/#posting-rules","title":"Posting Rules","text":"<p>Control when and what to post:</p> <pre><code>[social_media.posting]\nrandom_sample_size = 3          # Default sample size\ndaily_limit = 5                 # Maximum posts per day\nmin_hours_between_posts = 2     # Minimum time between posts\nexclude_private = true          # Don't post about private repos\nexclude_forks = true            # Don't post about forked repos\nminimum_stars = 0               # Minimum stars to post about a repo\nhashtag_limit = 5               # Maximum hashtags per post\n</code></pre>"},{"location":"usage/#license-management","title":"License Management","text":""},{"location":"usage/#list-available-licenses","title":"List Available Licenses","text":"<pre><code>ghops license list\n</code></pre>"},{"location":"usage/#view-license-template","title":"View License Template","text":"<pre><code>ghops license show mit\nghops license show apache-2.0\nghops license show gpl-3.0\n</code></pre>"},{"location":"usage/#add-licenses-during-operations","title":"Add Licenses During Operations","text":"<pre><code># Add license during cloning\nghops get --license mit --license-name \"Your Name\" --license-email \"you@example.com\"\n\n# Add/update licenses during update\nghops update -r --license mit --license-name \"Your Name\"\n</code></pre>"},{"location":"usage/#performance-and-optimization","title":"Performance and Optimization","text":""},{"location":"usage/#speed-up-status-checks","title":"Speed Up Status Checks","text":"<pre><code># Skip time-consuming checks\nghops status --no-pypi-check --no-pages-check\n\n# For very large numbers of repositories\nghops status --no-pypi-check  # PyPI check is usually the slowest\n</code></pre>"},{"location":"usage/#configuration-for-performance","title":"Configuration for Performance","text":"<pre><code>[general]\nmax_concurrent_operations = 10  # Increase for faster parallel operations\nprogress_bar = true             # Show progress for long operations\n\n[pypi]\ntimeout_seconds = 5             # Reduce timeout for faster checks\n</code></pre>"},{"location":"usage/#common-workflows","title":"Common Workflows","text":""},{"location":"usage/#daily-development-workflow","title":"Daily Development Workflow","text":"<pre><code># Check status of all projects\nghops status -r\n\n# Update all repositories\nghops update -r\n\n# Post about recent work (dry run first)\nghops social post --dry-run --size 2\nghops social post --size 2\n</code></pre>"},{"location":"usage/#new-project-setup","title":"New Project Setup","text":"<pre><code># Clone all repositories\nghops get --dir ~/projects\n\n# Add licenses to unlicensed repositories\nghops update -r --license mit --license-name \"Your Name\" --license-email \"you@example.com\"\n\n# Check final status\nghops status -r\n</code></pre>"},{"location":"usage/#social-media-promotion","title":"Social Media Promotion","text":"<pre><code># Sample repositories to see what's available\nghops social sample --size 5\n\n# Create posts for PyPI releases and documentation updates\nghops social post --dry-run\n\n# Actually post when ready\nghops social post --size 3\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#configuration-issues","title":"Configuration Issues","text":"<pre><code># Regenerate configuration if corrupted\nghops config generate\n\n# Check current configuration\nghops config show\n</code></pre>"},{"location":"usage/#performance-issues","title":"Performance Issues","text":"<ul> <li>Use <code>--no-pypi-check</code> if PyPI API is slow</li> <li>Use <code>--no-pages-check</code> if GitHub API is rate-limited</li> <li>Reduce <code>timeout_seconds</code> in configuration</li> <li>Increase <code>max_concurrent_operations</code> for faster parallel processing</li> </ul>"},{"location":"usage/#social-media-issues","title":"Social Media Issues","text":"<ul> <li>Verify API credentials in configuration</li> <li>Check platform-specific rate limits</li> <li>Use <code>--dry-run</code> to test without actually posting</li> <li>Check that platforms are <code>enabled = true</code> in configuration</li> </ul>"},{"location":"usage/#pypi-detection-issues","title":"PyPI Detection Issues","text":"<ul> <li>Ensure <code>packaging</code> Python package is installed</li> <li>Check that packaging files (<code>pyproject.toml</code>, etc.) are valid</li> <li>Verify network connectivity to PyPI</li> <li>Check <code>timeout_seconds</code> configuration if requests are timing out</li> </ul>"},{"location":"usage/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":""},{"location":"usage/#test-coverage-and-quality","title":"Test Coverage and Quality","text":"<p><code>ghops</code> maintains high quality standards with:</p> <ul> <li>138 comprehensive tests covering all major functionality</li> <li>86% test coverage across the entire codebase</li> <li>Unit tests for individual functions and classes</li> <li>Integration tests for end-to-end workflows</li> <li>Mock testing for external API interactions</li> <li>Error condition testing for robust error handling</li> </ul>"},{"location":"usage/#running-tests-for-contributors","title":"Running Tests (for Contributors)","text":"<pre><code># Install development dependencies\npip install -e \".[test]\"\n\n# Run all tests\npytest\n\n# Run with coverage report\npytest --cov=ghops --cov-report=html\n\n# Run specific test modules\npytest tests/test_status.py\npytest tests/test_integration.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"usage/#test-categories","title":"Test Categories","text":""},{"location":"usage/#unit-tests","title":"Unit Tests","text":"<ul> <li>Command modules: Test each command's core logic</li> <li>Utility functions: Test shared utilities and helpers</li> <li>Configuration system: Test config loading and merging</li> <li>PyPI integration: Test package detection and API calls</li> <li>Social media: Test content generation and platform integration</li> </ul>"},{"location":"usage/#integration-tests","title":"Integration Tests","text":"<ul> <li>End-to-end workflows: Full command execution paths</li> <li>File system operations: Repository cloning and updating</li> <li>API integration: Real API calls with mocking for reliability</li> <li>Error scenarios: Network failures and edge cases</li> </ul>"},{"location":"usage/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Code coverage: 86% across all modules</li> <li>Error handling: Comprehensive exception testing  </li> <li>Performance: Benchmarks for large repository sets</li> <li>Compatibility: Python 3.7+ support testing</li> </ul>"}]}